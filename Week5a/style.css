* {
    box-sizing: border-box;
}

.flexBody {
    background: rebeccapurple;
    display: flex;
    flex: 1 1 100%;
    flex-flow: column;
    font-family: Arial, Helvetica, sans-serif;
    height: 100vh;
    margin: 0;
    width: 100vw;
}

.footer {
    display: flex;
    justify-content: center;
}

.header {
    background: rgb(0, 47, 255);
    color: whitesmoke;
    display: flex;
    justify-content: space-between;
    padding: 5px;
}

.mainSection {
    background: whitesmoke;
    display: flex;
    flex: 1 1 100%;
    flex-direction: row;
    /* flex-wrap: wrap; */
}

.mainContent {
    background: whitesmoke;
    flex: 3 1 80%;
    padding: 1em;
}

.nav {
    display: flex;
    /* flex-direction: row; */
    /* Hi Floris, thanks for your answer. But this does not fully answer my question. As I understand it justify-content centers your content on your main axis and align-items center it on the other axis. In navigation I used a list. Is the default setting on a list, a row as well? I just tested it and it seems to be the case, but then I don't think I fully grasp the concept yet. Why are they stacked in list  if the default setting is row? I just commented out align-items in my code and defined flex-direction: row, and the result is the same as when I used align-items. I feel slightly confused.  */
}

.nav-list {
    display: flex;
    /* flex-direction: row; */
    font-weight: bold;
    /*why did I have to use align-items instead of justify-content? because in a list the main axis by default is a column?*/
    /* align-items: center; */
    list-style: none;
}

.nav-list-item {
    margin: 1em 2em 1em 2em;
}

.aside {
    background: rgb(68, 40, 168);
    flex: 1 1 10%;
    padding: 1em;
}

.aside-left {
    order: -1;
}